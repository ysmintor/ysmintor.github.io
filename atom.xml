<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[York's Home]]></title>
  <link href="ysmintor.github.io/atom.xml" rel="self"/>
  <link href="ysmintor.github.io/"/>
  <updated>2019-06-03T22:20:21+08:00</updated>
  <id>ysmintor.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
  </author>
  <generator uri="http://www.coderforart.com/">CoderForArt</generator>
  
  <entry>
    <title type="html"><![CDATA[KMeans 算法应用于 RGB 图像压缩]]></title>
    <link href="ysmintor.github.io/15588646449009.html"/>
    <updated>2019-05-26T17:57:24+08:00</updated>
    <id>ysmintor.github.io/15588646449009.html</id>
    <content type="html">
<![CDATA[<p>KMeans算法可以应用于图像压缩，这种压缩实质上是一种有损压缩，实质上是将原本的色彩空间进行聚类，当所聚类的数据增长时，压缩后的质量也随之增加。</p>

<p>关于聚类算法的的介绍和具体处理步聚就是在这里细讲，主要是讲解关于 KMeans 应用于图像压缩的实质和实现</p>

<span id="more"></span><!-- more -->

<p>从下图可以看到对一张原图使用 KMeans 使用聚类算法进行压缩时，首先要将原来的图像的所有像素放置到一个相同维度的容器，例如<code>Numpy</code>中的<code>Array</code>，然后进行进聚类，最终聚类的个数需要指定，聚类个数越大，压缩后的图像质量也就越好，但压缩比就降低，即压缩后的文件大小变化并不明显。注意在保存的压缩文件，压缩的图像坐标[x,y]所对应的并不是这个像素的 RGB 值，而是一个类似于指针的 Index。如下所的例子，原图所有像素聚类后的中心点有64个，那么可以用6bit 来表示（\(2^6=64\)），从例方向看每一列就对应一个聚类后的 RGB 颜色，压缩后的图像，图上的 K 就指向其中一列，表示取这个颜色，在恢复原图时就依据这个，把指向的具体的 RGB 值取出来。</p>

<p>因此，压缩只是存储的压缩，在内存中进行显示的时候，还是需要还原，占用的内存空间和原图所占用的内存空间是一样大的。</p>

<p><img src="media/15588646449009/15588648409263.jpg" alt="基本原理图"/></p>

<p>下图是一张不同聚类个数后所得到的不同质量的图像<br/>
<img src="media/15588646449009/15588656930757.jpg" alt="不同聚类值"/></p>

<p>像下图这一张老虎图，是一张压缩后的图，一黑白图，注意这个位图不是彩色是因为像素代表的聚类后的颜色对应的<code>指针</code>。<br/>
<img src="media/15588646449009/compressed_tiger.png" alt="compressed_tige"/></p>

<hr/>

<h1 id="toc_0">参考资料</h1>

<p><a href="https://www.jianshu.com/p/594e9fc5db9a">Kmeans算法原理与应用-RGB图像压缩</a><br/>
<a href="https://github.com/ysmintor/Image-compression-with-Kmeans-clustering">Image-compression-with-Kmeans-clustering</a></p>
]]>
    </content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[个人常用 Linux 命令]]></title>
    <link href="ysmintor.github.io/15571128852826.html"/>
    <updated>2019-05-06T11:21:25+08:00</updated>
    <id>ysmintor.github.io/15571128852826.html</id>
    <content type="html">
<![CDATA[<p>uname, file, tar</p>

<table>
<thead>
<tr>
<th style="text-align: left">命令</th>
<th style="text-align: left">解释</th>
</tr>
</thead>

<tbody>
<tr>
<td style="text-align: left">xargs</td>
<td style="text-align: left">将管道的输出内容合并成一行数据，使用空格分割</td>
</tr>
<tr>
<td style="text-align: left">find .</td>
<td style="text-align: left">grep txt</td>
</tr>
<tr>
<td style="text-align: left">mount</td>
<td style="text-align: left">挂载</td>
</tr>
<tr>
<td style="text-align: left">mount /dev/cdrom /mnt/cdrom</td>
<td style="text-align: left">挂载光驱到/mnt/cdrom 下</td>
</tr>
<tr>
<td style="text-align: left">umount</td>
<td style="text-align: left">解除挂载</td>
</tr>
<tr>
<td style="text-align: left">umount /dev/cdrom</td>
<td style="text-align: left">解除挂载</td>
</tr>
<tr>
<td style="text-align: left">ps -Af</td>
<td style="text-align: left">显示进程信息</td>
</tr>
<tr>
<td style="text-align: left">cut -c num1-num2</td>
<td style="text-align: left">剪切</td>
</tr>
<tr>
<td style="text-align: left">cmd --help</td>
<td style="text-align: left">查看帮助</td>
</tr>
<tr>
<td style="text-align: left">man cmd</td>
<td style="text-align: left">通过 查看 manual 文档</td>
</tr>
<tr>
<td style="text-align: left">help</td>
<td style="text-align: left">直接查看相应的文档</td>
</tr>
<tr>
<td style="text-align: left">fdisk -l /dev/sda</td>
<td style="text-align: left">查看分区表 sda1.2.3 是相应的分区</td>
</tr>
<tr>
<td style="text-align: left">df</td>
<td style="text-align: left">磁盘空间使用情况 disk free</td>
</tr>
<tr>
<td style="text-align: left">df -ah</td>
<td style="text-align: left"></td>
</tr>
<tr>
<td style="text-align: left">dd diskdump</td>
<td style="text-align: left"></td>
</tr>
<tr>
<td style="text-align: left">dirname</td>
<td style="text-align: left">查看文件夹)所在目录</td>
</tr>
<tr>
<td style="text-align: left">basename</td>
<td style="text-align: left"></td>
</tr>
<tr>
<td style="text-align: left">$(command)</td>
<td style="text-align: left">命令</td>
</tr>
<tr>
<td style="text-align: left">$ (xxx $(xxx))</td>
<td style="text-align: left">嵌套命令</td>
</tr>
<tr>
<td style="text-align: left">cd -P ..</td>
<td style="text-align: left">Phisical, 非连接, 对于链接目录文件</td>
</tr>
<tr>
<td style="text-align: left">cd -</td>
<td style="text-align: left">后退</td>
</tr>
<tr>
<td style="text-align: left">cd -n</td>
<td style="text-align: left">后退到n步骤</td>
</tr>
</tbody>
</table>

<h3 id="toc_0">重启</h3>

<table>
<thead>
<tr>
<th style="text-align: left">命令</th>
<th style="text-align: left">解释</th>
</tr>
</thead>

<tbody>
<tr>
<td style="text-align: left">sudo reboot</td>
<td style="text-align: left">重启</td>
</tr>
<tr>
<td style="text-align: left">sudo shutdown -P now</td>
<td style="text-align: left">关机，-p 关电源 -r reboot</td>
</tr>
<tr>
<td style="text-align: left">sudo halt -p</td>
<td style="text-align: left">关机，关电源</td>
</tr>
</tbody>
</table>

<h3 id="toc_1">环境变量</h3>

<table>
<thead>
<tr>
<th style="text-align: left">命令</th>
<th style="text-align: left">解释</th>
</tr>
</thead>

<tbody>
<tr>
<td style="text-align: left">echo $</td>
<td style="text-align: left"></td>
</tr>
<tr>
<td style="text-align: left">if[ $# -lt 1]</td>
<td style="text-align: left"></td>
</tr>
<tr>
<td style="text-align: left">if[ $# -gt 1]</td>
<td style="text-align: left"></td>
</tr>
<tr>
<td style="text-align: left">if[ -e xxx ]</td>
<td style="text-align: left">是否存在</td>
</tr>
<tr>
<td style="text-align: left">if[ $# -gt 1]</td>
<td style="text-align: left"></td>
</tr>
<tr>
<td style="text-align: left">if[ -d file ]</td>
<td style="text-align: left">如果file文件存在且是一个目录则为真</td>
</tr>
<tr>
<td style="text-align: left">a;b</td>
<td style="text-align: left">多行命令一起写，无逻辑</td>
</tr>
<tr>
<td style="text-align: left">(a;b)</td>
<td style="text-align: left">组合命令，只在当前目录执行，不切换</td>
</tr>
<tr>
<td style="text-align: left">ls -al; cd /usr/;pwd</td>
<td style="text-align: left">相应命令</td>
</tr>
<tr>
<td style="text-align: left">(ls -al;cd ~;pwd)</td>
<td style="text-align: left">在当前目录执行</td>
</tr>
</tbody>
</table>

<p>The square brackets ( [ ] ) in the if statement above are actually a reference to the command test. </p>

<table>
<thead>
<tr>
<th style="text-align: left">Operator</th>
<th style="text-align: left">Description</th>
</tr>
</thead>

<tbody>
<tr>
<td style="text-align: left">! EXPRESSION</td>
<td style="text-align: left">The EXPRESSION is false.</td>
</tr>
<tr>
<td style="text-align: left">-n STRING</td>
<td style="text-align: left">The length of STRING is greater than zero.</td>
</tr>
<tr>
<td style="text-align: left">-z STRING</td>
<td style="text-align: left">The lengh of STRING is zero (ie it is empty).</td>
</tr>
<tr>
<td style="text-align: left">STRING1 = STRING2</td>
<td style="text-align: left">STRING1 is equal to STRING2</td>
</tr>
<tr>
<td style="text-align: left">STRING1 != STRING2</td>
<td style="text-align: left">STRING1 is not equal to STRING2</td>
</tr>
<tr>
<td style="text-align: left">INTEGER1 -eq INTEGER2</td>
<td style="text-align: left">INTEGER1 is numerically equal to INTEGER2</td>
</tr>
<tr>
<td style="text-align: left">INTEGER1 -gt INTEGER2</td>
<td style="text-align: left">INTEGER1 is numerically greater than INTEGER2</td>
</tr>
<tr>
<td style="text-align: left">INTEGER1 -lt INTEGER2</td>
<td style="text-align: left">INTEGER1 is numerically less than INTEGER2</td>
</tr>
<tr>
<td style="text-align: left">-d FILE</td>
<td style="text-align: left">FILE exists and is a directory.</td>
</tr>
<tr>
<td style="text-align: left">-e FILE</td>
<td style="text-align: left">FILE exists.</td>
</tr>
<tr>
<td style="text-align: left">-r FILE</td>
<td style="text-align: left">FILE exists and the read permission is granted.</td>
</tr>
<tr>
<td style="text-align: left">-s FILE</td>
<td style="text-align: left">FILE exists and it&#39;s size is greater than zero (ie. it is not empty).</td>
</tr>
<tr>
<td style="text-align: left">-w FILE</td>
<td style="text-align: left">FILE exists and the write permission is granted.</td>
</tr>
<tr>
<td style="text-align: left">-x FILE</td>
<td style="text-align: left">FILE exists and the execute permission is granted.</td>
</tr>
</tbody>
</table>

<h3 id="toc_2">Shell 变量</h3>

<table>
<thead>
<tr>
<th style="text-align: left">命令</th>
<th style="text-align: left">解释</th>
</tr>
</thead>

<tbody>
<tr>
<td style="text-align: left">$0</td>
<td style="text-align: left">The name of the Bash script.</td>
</tr>
<tr>
<td style="text-align: left">$1 - $9</td>
<td style="text-align: left">The first 9 arguments to the Bash script. (As mentioned above.)</td>
</tr>
<tr>
<td style="text-align: left">$#</td>
<td style="text-align: left">How many arguments were passed to the Bash script.</td>
</tr>
<tr>
<td style="text-align: left">$@</td>
<td style="text-align: left">All the arguments supplied to the Bash script.</td>
</tr>
<tr>
<td style="text-align: left">$?</td>
<td style="text-align: left">The exit status of the most recently run process.</td>
</tr>
<tr>
<td style="text-align: left">$$</td>
<td style="text-align: left">The process ID of the current script.</td>
</tr>
</tbody>
</table>

<h3 id="toc_3">NetCat</h3>

<p>nc 瑞士军刀</p>

<table>
<thead>
<tr>
<th style="text-align: left">命令</th>
<th style="text-align: left">解释</th>
</tr>
</thead>

<tbody>
<tr>
<td style="text-align: left">nc -l 8888</td>
<td style="text-align: left">在本机启动 ServerSocket 进程</td>
</tr>
</tbody>
</table>

<p>字符聊天</p>

<ul>
<li>服务端</li>
<li>nc -l localhost port</li>
<li>客户端</li>
<li>nc localhost port</li>
</ul>

<p>传送文件</p>

<ul>
<li>服务端</li>
<li>nc -l 1234 &gt; receive.txt // 重定向接收数据到文件</li>
<li>客户端</li>
<li>nc localhost 1234 &lt; send.txt // 从定向输入</li>
</ul>

<p>端口扫描<br/>
nc ip -z port1-portn // 指定需要扫描的主机 ip 和端口区间<br/>
nc -v -w s s1 -z 2000-4000<br/>
-v 详细信息<br/>
-w 连接超时<br/>
-z 端口扫描</p>
]]>
    </content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[二叉搜索树转换成一个有序的双向链表]]></title>
    <link href="ysmintor.github.io/15584922730010.html"/>
    <updated>2019-05-22T10:31:13+08:00</updated>
    <id>ysmintor.github.io/15584922730010.html</id>
    <content type="html">
<![CDATA[<p>以下函数用于将一颗二叉搜索树转换成一个有序的双向链表。要求不能创建任何新的节点，只能调整树种节点指针的指向。</p>

<p>如输入下图中左边的二叉搜索树，则输出转换后的排序双向链表：<br/>
   10<br/>
/      \<br/>
6      14<br/>
/  \      /  \<br/>
4   8  12  16<br/>
转换成：<br/>
4 &lt;=&gt; 6 &lt;=&gt; 8 &lt;=&gt; 10 &lt;=&gt; 12  &lt;=&gt; 14 &lt;=&gt; 16<br/>
这个题目搜索了一下，我发现算是特别经典的题目了。对于没有练习过这种题目的还是很花费时间的。</p>

<p>总体上可以归纳为<code>递归</code>与<code>非递归</code>两种，实现上对于<code>递归</code>类要考虑的边界条件要处理比<code>非递归</code>类要麻烦得多<br/>
下面是<code>非递归</code>类的解答，没有经过测试用例，但大概思想主要就是二叉树的中序非递归遍历，并在遍历过程中去处理左右结点。</p>

<hr/>

<pre><code class="language-cpp">#include &lt;stack&gt;
using namespace std;

struct TreeNode
{
    int val;
    TreeNode *left, *right;
};

TreeNode *Convert(TreeNode *root)
{
    if (root == NULL)
        return root;

    TreeNode *listHead = NULL;
    TreeNode *listLastNode = NULL;
    TreeNode *pre = NULL;   // save the left most child as the left element for the root element

    stack&lt;TreeNode *&gt; S;
    while (root || !s.isempty())
    {
        while (root)
        {
            s.push(root);
            root = root-&gt;left;
        }
        root = s.pop();
        if (listHead == NULL)
        {
            listHead = root;
            pre = root;
        }
        else
        {
            pre.right = root;
            root.left = pre;
            pre = root;
        }
        root = root-&gt;right;     // process right children
    }
    return listHead;
}
</code></pre>

<p><a href="https://blog.csdn.net/u010005281/article/details/79657259" title="csdn">二叉搜索树与双向链表（Python）</a></p>

<hr/>

<p>__</p>
]]>
    </content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[幸运不是运气]]></title>
    <link href="ysmintor.github.io/15584517368424.html"/>
    <updated>2019-05-21T23:15:36+08:00</updated>
    <id>ysmintor.github.io/15584517368424.html</id>
    <content type="html">
<![CDATA[<p>近期还负担着导师的任务，可不知为何竟然抽了一份简历出参加今日关条的面试，而自己本来是没有任何准备的，特别是对于我自己是喜欢提前准备的人，感觉到压力很大。对于这种极限的变动，真的不适应。</p>

<p>另外又对六级进行刷分，也就准备了几天，有相当的部分准备起来很有压力。所以最近这几天的时间可以说特别地紧。</p>

<p>由此，联想到这次面试机会到底是幸运呢？还是一个无谓地花费时间的活动。如果之前早就能够针对于面试去准备简历和相应刷题，那必然就是自己的幸运，可这个运气握把不住的原因就是自己的功夫没能够准备充足。</p>
]]>
    </content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tensorflow Lazy Loading Problem]]></title>
    <link href="ysmintor.github.io/15557651606995.html"/>
    <updated>2019-04-20T20:59:20+08:00</updated>
    <id>ysmintor.github.io/15557651606995.html</id>
    <content type="html">
<![CDATA[<p>lazy loading is a trap<br/>
Tensorflow 中的 lazy loading 是什么？</p>

<p>正常加载数据形式通常是如下所示</p>

<pre><code class="language-python">x = tf.Variable(10, name=&#39;x&#39;)
y = tf.Variable(20, name=&#39;y&#39;)
z = tf.add(x, y)        # create the node before executing the graph

writer = tf.summary.FileWriter(&#39;./graphs/normal_loading&#39;, tf.get_default_graph())
with tf.Session() as sess:
    sess.run(tf.global_variables_initializer())
    for _ in range(10):
        sess.run(z)
writer.close()
</code></pre>

<p>而将 add 操作放到session 中便会产生 lazy loading 问题，即</p>

<pre><code class="language-python">x = tf.Variable(10, name=&#39;x&#39;)
y = tf.Variable(20, name=&#39;y&#39;)

writer = tf.summary.FileWriter(&#39;./graphs/normal_loading&#39;, tf.get_default_graph())
with tf.Session() as sess:
    sess.run(tf.global_variables_initializer())
    for _ in range(10):
        sess.run(tf.add(x, y)) # someone decides to be clever to save one line of code
writer.close()
</code></pre>

<p>在普通情况下相加，即第一段代码块所对应的 TensorBoard 如下图所示。<br/>
<img src="media/15557651606995/15557654788021.jpg" alt="normal add" style="width:1024px;"/></p>

<p>对应的 Protobuf</p>

<pre><code class="language-javascript">node {
  name: &quot;Add&quot;
  op: &quot;Add&quot;
  input: &quot;x/read&quot;
  input: &quot;y/read&quot;
  attr {
    key: &quot;T&quot;
    value {
      type: DT_INT32
    }
  }
}
</code></pre>

<p>上述第二段代码产生 lazy loading 对对应的示例如下图。<br/>
<img src="media/15557651606995/15557656548298.jpg" alt="lazy loading" style="width:1095px;"/></p>

<p>对应的 Probuff</p>

<pre><code class="language-javascript">node {
  name: &quot;Add_1&quot;
  op: &quot;Add&quot;
  ...
  }
...
node {
  name: &quot;Add_10&quot;
  op: &quot;Add&quot;
  ...
}
</code></pre>

<p>可以明显地看到，生产 lazy loading 是在一个 Graph 中不断生成新的节点，而对应的 Protobuf 也从侧面印证了这一点，因此当数据量特别大的时候，可能会产生内存被点满的情况。</p>
]]>
    </content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Numpy Axes]]></title>
    <link href="ysmintor.github.io/numpy-axes-explained.html"/>
    <updated>2019-04-17T12:12:39+08:00</updated>
    <id>ysmintor.github.io/numpy-axes-explained.html</id>
    <content type="html">
<![CDATA[<p>在 Numpy 中针对二维的情况，axis=0 就是向下沿着行方向，而 axis=1就是沿着列方向。具体示下图所示。<br/>
<img src="media/15554743595239/15554745023882.jpg" alt="numpy coordinate"/></p>

<p>在下述代码中，很奇怪为什么在<code>axis=0</code>时相加的按行，这里和直观感受不相符。</p>

<pre><code class="language-python">np_array_2d = np.arange(0, 6).reshape([2,3])
print(np_array_2d)
[[0 1 2]
 [3 4 5]]
 np.sum(np_array_2d, axis = 0)
 array([3, 5, 7]) # output
</code></pre>

<p>通过参考知道</p>

<blockquote>
<p>the axis parameter indicates which axis gets collapsed.</p>
</blockquote>

<p>因此是将行进行压缩，所以就是按各列来求和。以图来描述更直观。</p>

<p><img src="media/15554743595239/15554747871377.jpg" alt="collapses"/></p>

<p>同理可以知 axis=1是对各列压缩即在行上进行操作。</p>

<p>参考链接<br/>
<a href="https://www.sharpsightlabs.com/blog/numpy-axes-explained/">numpy axes explained</a></p>
]]>
    </content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[基于 Gradle 远程连接Hadoop HDFS编程]]></title>
    <link href="ysmintor.github.io/15543961787923.html"/>
    <updated>2019-04-05T00:42:58+08:00</updated>
    <id>ysmintor.github.io/15543961787923.html</id>
    <content type="html">
<![CDATA[<p>在一个现代化的编程时代，界面不好看的 <code>Eclipse</code> 和操作易用性相比而言更高的 <code>IntelliJ Idea</code>。而在进行 Hadoop 进行编程的时候，最基本的是需要导入相应的 Jar 包，而更为便捷的则是使用 Maven 来进行包的依赖管理，而本文则结合 Gradle 来处理引入最基本的 Hadoop 包，配置运行环境。</p>

<h2 id="toc_0">新建一个 Gradle 项目</h2>

<p>在新建时要选择 Gradle 项目，并在连接过程中自动下载 Gradle。<br/>
<img src="media/15543961787923/1.new_gradle_projects.png" alt="Step1 new_gradle_projects"/><br/>
<span id="more"></span><!-- more --></p>

<p>在下一步中，要输入一个类似于下图的 GroupId，ArtifactId，这其实是基于 Maven 结构的，关于这个如何比较正确填写可以参考<br/>
<a href="https://maven.apache.org/guides/mini/guide-naming-conventions.html">Guide to naming conventions on groupId, artifactId, and version</a><br/>
<img src="media/15543961787923/2.group_artifactid_version.png" alt="Step2 group_artifactid_version" class="mw_img_center" style="width:500px;display: block; clear:both; margin: 0 auto;"/></p>

<p>接下来相应的配置可以直接进入下一步，配置如下，如果需要自动导包功能也可以选择<br/>
<img src="media/15543961787923/3.other_configure.png" alt="Step3 other_configure" class="mw_img_center" style="width:500px;display: block; clear:both; margin: 0 auto;"/></p>

<h2 id="toc_1">在 Maven Repository 中查找相应的依赖</h2>

<p>通过<a href="https://mvnrepository.com">Maven Repository</a>中搜索Apache Hadoop Common并查找当前连接对应的 Hadoop 版本，我目前使用的是2.8.5，所以就找到了对应于2.8.5的版本,并在下面的代码框中选择 Gradle，默认是 Maven 导入的代码，切换后可以看到是一行代码<code>compile group: &#39;org.apache.hadoop&#39;, name: &#39;hadoop-common&#39;, version: &#39;2.8.5&#39;</code><br/>
<img src="media/15543961787923/15544282060716.jpg" alt="hadoop common gradle" style="width:1132px;"/></p>

<p>按照同样的方式还需要引入Apache Hadoop HDFS,查找对应的依赖代码<br/>
<code>compile group: &#39;org.apache.hadoop&#39;, name: &#39;hadoop-hdfs&#39;, version: &#39;2.8.5&#39;</code><br/>
<img src="media/15543961787923/15544285829430.jpg" alt="" style="width:1128px;"/></p>

<h2 id="toc_2">将依赖代码填入</h2>

<p>打开项目文件，在 Project 视图中找到<code>build.gradle</code>文件，并在 dependencies 中填入刚刚从 Maven Repository 中找到了两个依赖，当你输入后，IDE 会自动通过网络下载对应的依赖，所以相应的烦琐的依赖及其相互依赖关系，通过 Gradle 能够很好地避免，整个过事其实是非常简单，只要实际尝试后，后面再去操作都变得十分容易。<br/>
<img src="media/15543961787923/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202019-04-05%20%E4%B8%8A%E5%8D%889.45.43.png" alt="填入依赖"/></p>

<h2 id="toc_3">新建文件并测试</h2>

<p>这里我自己通过新建一个<code>HDFSCreateFile</code>用来在 HDFS 文件系统创建一个名为test2的文件，文件内容则是Hello World。注意这里我修改了相应的 HDFS 文件系统地址，修改为<code>hdfs://192.168.1.199:9000</code>，是因为在局域网中我创建了了一真实的分布式文件系统，分为一个 master 节点和三个 slave 节点，而对于的名称节点即 master 节点对于的地址是<code>192.168.1.199</code>，当前的开发环境是在 Mac 下开发，如果你开发环境就是在对应的 master 节点，那么就可以用 <code>localhost</code> 或者<code>127.0.0.1</code>来处理。另外则是一般的文档说在和 HDFS 操作时创建了一个特殊用户名，如 Hadoop这类的，如果你运行程序的当前用户不是这个名称，需要提前在 HDFS 中创建对应的用户目录，否则运行程序会报权限错误。<br/>
具体代码</p>

<pre><code class="language-java">import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.FSDataOutputStream;
import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.Path;


public class HDFSCreateFile {
    public static void main(String[] args){
        try{
            Configuration conf = new Configuration();
                conf.set(&quot;fs.defaultFS&quot;,&quot;hdfs://192.168.1.199:9000&quot;);
                conf.set(&quot;fs.hdfs.impl&quot;,&quot;org.apache.hadoop.hdfs.DistributedFileSystem&quot;);
                FileSystem fs = FileSystem.get(conf);
                byte[] buff = &quot;Hello World&quot;.getBytes();
                String fileName = &quot;/test2&quot;;
                FSDataOutputStream os =fs.create(new Path(fileName));
                os.write(buff,0,buff.length);
                System.out.println(&quot;Create:&quot;+fileName);
                os.close();
                fs.close();         
        } catch (Exception e){
            e.printStackTrace();
        }
    }
}
</code></pre>

<h1 id="toc_4">总结</h1>

<p>相对于<code>Eclipse</code>,使用<code>IntelliJ Idea</code>显得更为现代感，功能上觉得两者都能实现。而<code>Eclipse</code>则更省资源，<code>IntelliJ Idea</code>使用上更为便捷。使用<code>Gradle</code>来进入依赖管理，可以省出更多时间专注于逻辑代码，解决不同包的依赖问题。</p>
]]>
    </content>
  </entry>
  
</feed>
